import sys

def my_generator():
  yield 2
  yield 1
  yield 3

gen = my_generator()
#TODO por cualquier metodo que se elija solo lo hara una vez, no se puede volver a repetir 

#for i in gen:
#  print(i)
  
#value = next(gen)
#print(value)

#value = next(gen)
#print(value)

#value = next(gen)
#print(value)
#hasta 3 itraciones gen

#print(sum(gen))

print(sorted(gen))

def countdown(num):
  print('starting')
  while num > 0:
    yield num
    num -= 1
    
count = countdown(4)

value = next(count)
print(value)

print(next(count))
print(next(count))
print(next(count))


def first(n):
  nums = []
  num = 0
  while num < n:
    nums.append(num)
    num += 1
  return nums

def first_generator(n):
  num = 0
  while num < n:
    yield num 
    num += 1

print(first(10))
print(sum(first(10)))
print(sys.getsizeof(first(1000000)))
print(first_generator(10))
print(sys.getsizeof(first_generator(1000000))) # menos espacio en memoria ya que vamos ocupando los resultados poco a poco 



def fibonacci(limit):
  # 0 1 previus number
  a, b = 0, 1
  while a < limit:
    yield a
    a, b = b, a + b

fib = fibonacci(1500)

for i in fib:
  print(i)
  

my_generation = (i for i in range(10) if i % 2 == 0)
for i in my_generation: 
  print(i)
  
  
my_generation = (i for i in range(10) if i % 2 != 0)
for i in my_generation: 
  print(i)

my_list = [i for i in range(10) if i % 2 != 0]
print(my_list)

print(sys.getsizeof(my_generation)) #better
print(sys.getsizeof(my_list))